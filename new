import { useState, useEffect } from "react";
import { useNavigate, useLocation } from "react-router-dom";
import { Container, Button, Form } from "react-bootstrap";
import { createCard, updateCard } from "../api";

function Create() {
    const navigate = useNavigate();
    const location = useLocation();
    const existingCard = location.state || {}; // Check if editing an existing card

    // State for form inputs
    const [formData, setFormData] = useState({
        title: "",
        description: "",
        image: null
    });

    // Prefill form when editing
    useEffect(() => {
        if (existingCard.id) {
            setFormData({
                title: existingCard.title,
                description: existingCard.description,
                image: null
            });
        }
    }, [existingCard]);

    // Handle input changes
    const handleChange = (e) => {
        const { name, value, files } = e.target;
        setFormData((prev) => ({
            ...prev,
            [name]: files ? files[0] : value // Handle file separately
        }));
    };

    // Handle form submission
    const handleSubmit = async (e) => {
        e.preventDefault();
        const data = new FormData();
        data.append("title", formData.title);
        data.append("description", formData.description);
        if (formData.image) data.append("image", formData.image);

        existingCard.id ? await updateCard(existingCard.id, data) : await createCard(data);
        navigate("/");
    };

    return (
        <Container>
            <h2>{existingCard.id ? "Edit Card" : "Create Card"}</h2>
            <Form onSubmit={handleSubmit}>
                <Form.Group>
                    <Form.Label>Title</Form.Label>
                    <Form.Control name="title" value={formData.title} onChange={handleChange} required />
                </Form.Group>
                <Form.Group>
                    <Form.Label>Description</Form.Label>
                    <Form.Control name="description" value={formData.description} onChange={handleChange} required />
                </Form.Group>
                <Form.Group>
                    <Form.Label>Image</Form.Label>
                    <Form.Control type="file" name="image" onChange={handleChange} />
                </Form.Group>
                <Button type="submit">{existingCard.id ? "Update" : "Create"}</Button>
            </Form>
        </Container>
    );
}

export default Create;


import { useState, useEffect } from "react";
import { useLocation, useNavigate } from "react-router-dom";
import { Container, Button, Form, Alert } from "react-bootstrap";
import { createCard, updateCard } from "../api";

function Create() {
    const location = useLocation();
    const navigate = useNavigate();

    const [formData, setFormData] = useState({
        title: "",
        description: "",
    });
    const [id, setId] = useState(null);
    const [error, setError] = useState("");

    // Update form data when location state is available
    useEffect(() => {
        if (location.state) {
            const { id, title, description } = location.state;
            setId(id);
            setFormData({ title, description });
        }
    }, [location.state]);

    // Handle form input change
    const handleChange = (e) => {
        const { name, value } = e.target;
        setFormData((prevData) => ({
            ...prevData,
            [name]: value,
        }));
    };

    // Handle form submission with short-circuiting
    const handleSubmit = async (e) => {
        e.preventDefault();

        const { title, description } = formData;

        // Short-circuit error handling and prevent submission if validation fails
        if (!title || !description) return setError("Title and Description are required.");

        try {
            // Proceed with create or update action based on the presence of an ID
            id ? await updateCard(id, { title, description }) : await createCard({ title, description });

            navigate("/"); // Redirect after successful operation
        } catch (err) {
            setError("An error occurred while saving the card.");
            console.error(err);
        }
    };

    return (
        <Container>
            <h2 className="my-4">{id ? "Edit Card" : "Create Card"}</h2>
            {error && <Alert variant="danger">{error}</Alert>}
            <Form onSubmit={handleSubmit}>
                <Form.Group className="mb-3">
                    <Form.Label>Title</Form.Label>
                    <Form.Control
                        type="text"
                        name="title"
                        value={formData.title}
                        onChange={handleChange}
                        required
                    />
                </Form.Group>

                <Form.Group className="mb-3">
                    <Form.Label>Description</Form.Label>
                    <Form.Control
                        as="textarea"
                        rows={3}
                        name="description"
                        value={formData.description}
                        onChange={handleChange}
                        required
                    />
                </Form.Group>

                <Button variant="primary" type="submit">
                    {id ? "Update" : "Create"}
                </Button>
            </Form>
        </Container>
    );
}

export default Create;



CSS

/* General Styling */
.App {
  text-align: center;
  background: linear-gradient(135deg, #063487, #1e5799);
  min-height: 100vh;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  font-family: 'Arial', sans-serif;
  color: white;
}

/* Logo Animation */
.App-logo {
  height: 40vmin;
  pointer-events: none;
  animation: App-logo-spin infinite 10s linear;
}

@keyframes App-logo-spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}

/* Header Styling */
.App-header {
  font-size: calc(14px + 2vmin);
  font-weight: bold;
  text-shadow: 2px 2px 5px rgba(0, 0, 0, 0.3);
}

/* Button Styling */
button {
  background: linear-gradient(135deg, #dd2713, #ff5733);
  color: white;
  font-size: 1.2em;
  font-weight: bold;
  border: none;
  padding: 12px 24px;
  margin: 10px;
  border-radius: 8px;
  cursor: pointer;
  transition: all 0.3s ease-in-out;
  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.2);
}

button:hover {
  background: linear-gradient(135deg, #ff5733, #ff794f);
  transform: scale(1.05);
}

button:active {
  transform: scale(0.95);
}

/* Counter Display */
.counter {
  font-size: 3em;
  font-weight: bold;
  margin: 20px;
  color: #fff;
  text-shadow: 3px 3px 6px rgba(0, 0, 0, 0.3);
}

/* Link Styling */
.App-link {
  color: #ffcc00;
  text-decoration: none;
  font-weight: bold;
  transition: color 0.3s ease-in-out;
}

.App-link:hover {
  color: #ffe680;
}


