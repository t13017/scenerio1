action

export const FETCH_CARDS_REQUEST = "FETCH_CARDS_REQUEST";
export const FETCH_CARDS_SUCCESS = "FETCH_CARDS_SUCCESS";
export const FETCH_CARDS_FAILURE = "FETCH_CARDS_FAILURE";

export const CREATE_CARD_REQUEST = "CREATE_CARD_REQUEST";
export const CREATE_CARD_SUCCESS = "CREATE_CARD_SUCCESS";
export const CREATE_CARD_FAILURE = "CREATE_CARD_FAILURE";

export const UPDATE_CARD_REQUEST = "UPDATE_CARD_REQUEST";
export const UPDATE_CARD_SUCCESS = "UPDATE_CARD_SUCCESS";
export const UPDATE_CARD_FAILURE = "UPDATE_CARD_FAILURE";

export const DELETE_CARD_REQUEST = "DELETE_CARD_REQUEST";
export const DELETE_CARD_SUCCESS = "DELETE_CARD_SUCCESS";
export const DELETE_CARD_FAILURE = "DELETE_CARD_FAILURE";

// Fetch Cards
export const fetchCardsRequest = () => ({ type: FETCH_CARDS_REQUEST });
export const fetchCardsSuccess = (cards) => ({ type: FETCH_CARDS_SUCCESS, payload: cards });
export const fetchCardsFailure = (error) => ({ type: FETCH_CARDS_FAILURE, payload: error });

// Create Card
export const createCardRequest = (cardData) => ({ type: CREATE_CARD_REQUEST, payload: cardData });
export const createCardSuccess = (card) => ({ type: CREATE_CARD_SUCCESS, payload: card });
export const createCardFailure = (error) => ({ type: CREATE_CARD_FAILURE, payload: error });

// Update Card
export const updateCardRequest = (id, cardData) => ({ type: UPDATE_CARD_REQUEST, payload: { id, cardData } });
export const updateCardSuccess = (updatedCard) => ({ type: UPDATE_CARD_SUCCESS, payload: updatedCard });
export const updateCardFailure = (error) => ({ type: UPDATE_CARD_FAILURE, payload: error });

// Delete Card
export const deleteCardRequest = (id) => ({ type: DELETE_CARD_REQUEST, payload: id });
export const deleteCardSuccess = (id) => ({ type: DELETE_CARD_SUCCESS, payload: id });
export const deleteCardFailure = (error) => ({ type: DELETE_CARD_FAILURE, payload: error });


reducer

import {
  FETCH_CARDS_SUCCESS,
  FETCH_CARDS_FAILURE,
  CREATE_CARD_SUCCESS,
  CREATE_CARD_FAILURE,
  UPDATE_CARD_SUCCESS,
  UPDATE_CARD_FAILURE,
  DELETE_CARD_SUCCESS,
  DELETE_CARD_FAILURE
} from "../actions/cardActions";

const initialState = {
  cards: [],
  error: null,
};

const cardReducer = (state = initialState, action) => {
  switch (action.type) {
    case FETCH_CARDS_SUCCESS:
      return { ...state, cards: action.payload, error: null };

    case FETCH_CARDS_FAILURE:
    case CREATE_CARD_FAILURE:
    case UPDATE_CARD_FAILURE:
    case DELETE_CARD_FAILURE:
      return { ...state, error: action.payload };

    case CREATE_CARD_SUCCESS:
      return { ...state, cards: [...state.cards, action.payload], error: null };

    case UPDATE_CARD_SUCCESS:
      return {
        ...state,
        cards: state.cards.map((card) =>
          card.id === action.payload.id ? action.payload : card
        ),
      };

    case DELETE_CARD_SUCCESS:
      return {
        ...state,
        cards: state.cards.filter((card) => card.id !== action.payload),
      };

    default:
      return state;
  }
};

export default cardReducer;


saga

import { call, put, takeLatest } from "redux-saga/effects";
import {
  FETCH_CARDS_REQUEST,
  fetchCardsSuccess,
  fetchCardsFailure,
  CREATE_CARD_REQUEST,
  createCardSuccess,
  createCardFailure,
  UPDATE_CARD_REQUEST,
  updateCardSuccess,
  updateCardFailure,
  DELETE_CARD_REQUEST,
  deleteCardSuccess,
  deleteCardFailure,
} from "../actions/cardActions";

import { fetchCards, createCard, updateCard, deleteCard } from "../../api/api";

// Fetch Cards Saga
function* fetchCardsSaga() {
  try {
    const cards = yield call(fetchCards);
    yield put(fetchCardsSuccess(cards));
  } catch (error) {
    yield put(fetchCardsFailure(error.message));
  }
}

// Create Card Saga
function* createCardSaga(action) {
  try {
    const card = yield call(createCard, action.payload);
    yield put(createCardSuccess(card));
  } catch (error) {
    yield put(createCardFailure(error.message));
  }
}

// Update Card Saga
function* updateCardSaga(action) {
  try {
    const updatedCard = yield call(updateCard, action.payload.id, action.payload.cardData);
    yield put(updateCardSuccess(updatedCard));
  } catch (error) {
    yield put(updateCardFailure(error.message));
  }
}

// Delete Card Saga
function* deleteCardSaga(action) {
  try {
    yield call(deleteCard, action.payload);
    yield put(deleteCardSuccess(action.payload));
  } catch (error) {
    yield put(deleteCardFailure(error.message));
  }
}

export function* cardSaga() {
  yield takeLatest(FETCH_CARDS_REQUEST, fetchCardsSaga);
  yield takeLatest(CREATE_CARD_REQUEST, createCardSaga);
  yield takeLatest(UPDATE_CARD_REQUEST, updateCardSaga);
  yield takeLatest(DELETE_CARD_REQUEST, deleteCardSaga);
}


store

import { createStore, applyMiddleware } from "redux";
import createSagaMiddleware from "redux-saga";
import rootReducer from "./reducers/rootReducer";
import rootSaga from "./sagas/rootSaga";

const sagaMiddleware = createSagaMiddleware();
const store = createStore(rootReducer, applyMiddleware(sagaMiddleware));

sagaMiddleware.run(rootSaga);

export default store;


create 

import { useState } from "react";
import { useNavigate } from "react-router-dom";
import { useDispatch, useSelector } from "react-redux";
import { Container, Button, Form, Alert } from "react-bootstrap";
import { createCardRequest, updateCardRequest } from "../redux/actions/cardActions";

function Create() {
  const navigate = useNavigate();
  const dispatch = useDispatch();

  const cardData = useSelector((state) => state.card.currentCard) || {
    title: "",
    description: "",
  };

  const [formData, setFormData] = useState(cardData);
  const [message, setMessage] = useState({ text: "", type: "" });

  const handleChange = (e) => {
    const { name, value, files } = e.target;
    setFormData((prev) => ({
      ...prev,
      [name]: files ? files[0] : value,
    }));
  };

  const handleSubmit = (e) => {
    e.preventDefault();

    if (!formData.title || !formData.description) {
      return setMessage({ text: "Title and Description are required.", type: "danger" });
    }

    try {
      if (formData.id) {
        dispatch(updateCardRequest(formData.id, formData));
        setMessage({ text: "Card updated successfully!", type: "success" });
      } else {
        dispatch(createCardRequest(formData));
        setMessage({ text: "Card created successfully!", type: "success" });
      }

      setTimeout(() => {
        setMessage({ text: "", type: "" });
        navigate("/");
      }, 2000);
    } catch (err) {
      console.error(err);
      setMessage({ text: "An error occurred. Please try again.", type: "danger" });
    }
  };

  return (
    <Container>
      <h2 className="my-4">{formData.id ? "Edit Card" : "Create Card"}</h2>
      {message.text && <Alert variant={message.type}>{message.text}</Alert>}
      <Form onSubmit={handleSubmit}>
        <Form.Group className="mb-3">
          <Form.Label>Title</Form.Label>
          <Form.Control type="text" name="title" value={formData.title} onChange={handleChange} required />
        </Form.Group>

        <Form.Group className="mb-3">
          <Form.Label>Description</Form.Label>
          <Form.Control as="textarea" rows={3} name="description" value={formData.description} onChange={handleChange} required />
        </Form.Group>

        <Button variant="primary" type="submit">
          {formData.id ? "Update" : "Create"}
        </Button>
      </Form>
    </Container>
  );
}

export default Create;



{formData.title && (formData.title.length < 3 || formData.title.length > 50) && (
            <small className="text-danger">Title must be between 3 and 50 characters.</small>
          )}



{/* Show error message if API fails */}
      {error && <Alert variant="danger">{error}</Alert>}

      {/* Show loading spinner while fetching data */}
      {loading && <Spinner animation="border" role="status" />}



image size

.image-container {
  width: 100%;
  height: 200px; /* Fixed height for uniformity */
  display: flex;
  justify-content: center;
  align-items: center;
  overflow: hidden; /* Prevents overflow */
  background-color: #f8f9fa; /* Optional: Adds background if image is smaller */
}

.card-image {
  width: 100%;
  height: 100%;
  object-fit: cover; /* Ensures image covers the area without distortion */
}
///
.card-body {
  padding: 15px;
  text-align: center;
}

.card-title {
  font-size: 1.4rem;
  font-weight: bold;
  color: #007bff;
}

.card-text {
  font-size: 1rem;
  color: #666;
}

/* Button Styling */
.btn-custom {
  background: linear-gradient(to right, #007bff, #00c6ff);
  border: none;
  color: white;
  padding: 10px 20px;
  font-size: 1rem;
  border-radius: 5px;
  transition: all 0.3s ease;
}

.btn-custom:hover {
  background: linear-gradient(to right, #0056b3, #0080ff);
  transform: scale(1.05);
}

/* Form Styling */
.form-control {
  border-radius: 5px;
  border: 1px solid #ccc;
  padding: 10px;
  transition: border 0.3s ease;
}

.form-control:focus {
  border-color: #007bff;
  box-shadow: 0px 0px 5px rgba(0, 123, 255, 0.5);
}

/* Alert Box */
.alert {
  border-radius: 5px;
  text-align: center;
  font-weight: bold;
  padding: 12px;
}
🔹 Updated UI for HomePage.jsx
jsx
Copy code
import { useEffect } from "react";
import { Container, Card, Button } from "react-bootstrap";
import { useDispatch, useSelector } from "react-redux";
import { fetchCardsRequest } from "../redux/actions/cardActions";

function HomePage() {
  const dispatch = useDispatch();
  const { cards, error } = useSelector((state) => state.card);

  useEffect(() => {
    dispatch(fetchCardsRequest());
  }, [dispatch]);

  return (
    <Container className="mt-4">
      <h2 className="text-center mb-4">📌 Your Cards</h2>
      
      {error && <div className="alert alert-danger">{error}</div>}

      <div className="row">
        {cards.map((card) => (
          <div key={card.id} className="col-md-4 mb-4">
            <Card className="card">
              <div className="image-container">
                <Card.Img variant="top" src={card.image} className="card-image" />
              </div>
              <Card.Body>
                <Card.Title className="card-title">{card.title}</Card.Title>
                <Card.Text className="card-text">{card.description}</Card.Text>
                <Button className="btn-custom">View Details</Button>
              </Card.Body>
            </Card>
          </div>
        ))}
      </div>
    </Container>
  );
}

export default HomePage;
🔹 Updated UI for Create.jsx
jsx
Copy code
import { useState } from "react";
import { useNavigate } from "react-router-dom";
import { useDispatch } from "react-redux";
import { Container, Button, Form, Alert } from "react-bootstrap";
import { createCardRequest } from "../redux/actions/cardActions";

function Create() {
  const navigate = useNavigate();
  const dispatch = useDispatch();

  const [formData, setFormData] = useState({
    title: "",
    description: "",
    image: null,
  });
  const [message, setMessage] = useState({ text: "", type: "" });

  const handleChange = (e) => {
    const { name, value, files } = e.target;
    setFormData((prev) => ({
      ...prev,
      [name]: files ? files[0] : value,
    }));
  };

  const handleSubmit = (e) => {
    e.preventDefault();

    if (formData.title.length < 5) {
      return setMessage({ text: "Title must be at least 5 characters.", type: "danger" });
    }
    if (formData.description.length < 10) {
      return setMessage({ text: "Description must be at least 10 characters.", type: "danger" });
    }

    try {
      dispatch(createCardRequest(formData));
      setMessage({ text: "Card created successfully!", type: "success" });

      setTimeout(() => {
        setMessage({ text: "", type: "" });
        navigate("/");
      }, 2000);
    } catch (err) {
      console.error(err);
      setMessage({ text: "An error occurred. Please try again.", type: "danger" });
    }
  };

  return (
    <Container>
      <h2 className="my-4">📝 Create a New Card</h2>
      {message.text && <Alert variant={message.type}>{message.text}</Alert>}
      
      <Form onSubmit={handleSubmit} className="shadow p-4 rounded">
        <Form.Group className="mb-3">
          <Form.Label>Title</Form.Label>
          <Form.Control type="text" name="title" value={formData.title} onChange={handleChange} required />
        </Form.Group>

        <Form.Group className="mb-3">
          <Form.Label>Description</Form.Label>
          <Form.Control as="textarea" rows={3} name="description" value={formData.description} onChange={handleChange} required />
        </Form.Group>

        <Form.Group className="mb-3">
          <Form.Label>Image</Form.Label>
          <Form.Control type="file" name="image" accept="image/*" onChange={handleChange} />
        </Form.Group>

        <Button className="btn-custom" type="submit">
          Create Card
        </Button>
      </Form>
    </Container>
  );
}

export default Create;
🚀 Final Enhancements
✅ Modern card layout with hover effects
✅ Gradient buttons & smooth animations
✅ Styled form inputs with focus effect
✅ Error handling & success messages
✅ Consistent image sizes with aspect ratio fix

Your project will now look clean, modern, and interactive! 🎨 Let me know if you need more refinements! 🚀











Search

Reason
